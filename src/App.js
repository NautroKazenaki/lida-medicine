import React, { useState } from 'react';

const App = () => {
  const [currentPage, setCurrentPage] = useState(0);
  const [formValues, setFormValues] = useState(Array(64).fill('')); // Храним значения всех форм
  const totalPages = 8;
  const formsPerPage = 8;

  // Фиксированные пары min и max для 64 форм
  const minMaxValues = [
    { min: 4.081, max: 28.79 },    // Форма 1
    { min: 3.26, max: 21.087 }, // Форма 2
    { min: 46.76, max: 368.01 },     // Форма 3
    { min: 10.16, max: 45.44 },   // Форма 4
    { min: 13.21, max: 58.38 },     // Форма 5
    { min: 0.681, max: 4.493},   // Форма 6
    { min: 1.5, max: 10.73 },     // Форма 7
    { min: 0.153, max: 1.312 },   // Форма 8
    { min: 0.153, max: 1.721 },     // Форма 9
    { min: 0.404, max: 2.457 },   // Форма 10
    { min: 0.0018, max: 0.1263 },      // Форма 11
    { min: 0.489, max: 30.466 }, // Форма 12
    { min: 0.202, max: 1.198 },     // Форма 13
    { min: 0.071, max: 0.46 },   // Форма 14
    { min: 0.297, max: 4.5 },     // Форма 15
    { min: 0.39, max: 2.526 },   // Форма 16
    { min: 0.179, max: 1.996 },    // Форма 17
    { min: 0, max: 0.87 },   // Форма 18
    { min: 0.338, max: 4.692 },     // Форма 19
    { min: 0.046, max: 1.583 },   // Форма 20
    { min: 0.02, max: 0.223 },     // Форма 21
    { min: 0, max: 1.743 },   // Форма 22
    { min: 0.094, max: 0.36 },     // Форма 23
    { min: 0.761, max: 2.374 },   // Форма 24
    { min: 0.215, max: 1.709 },     // Форма 25
    { min: 7.17, max: 28.16 },   // Форма 26
    { min: 0.936, max: 4.51 },     // Форма 27
    { min: 1.36, max: 15.07 },   // Форма 28
    { min: 0.197, max: 0.981 },     // Форма 29
    { min: 0.339, max: 2.477 },   // Форма 30
    { min: 0.162, max: 1.318 },    // Форма 31
    { min: 0.068, max: 0.542 },   // Форма 32
    { min: 0.009, max: 0.126 },    // Форма 33
    { min: 0.525, max: 3.743 },   // Форма 34
    { min: 0.363, max: 1.914 },    // Форма 35
    { min: 1.52, max: 13.73 },   // Форма 36
    { min: 0.74, max: 3.265 },    // Форма 37
    { min: 0.1371, max: 1.3414 },   // Форма 38
    { min: 0.599, max: 2.177 },    // Форма 39
    { min: 2.281, max: 11.538 },   // Форма 40
    { min: 3.306, max: 8.73 },    // Форма 41
    { min: 0.092, max: 0.851 },   // Форма 42
    { min: 0.362, max: 2.396 },    // Форма 43
    { min: 0.125, max: 0.722 },   // Форма 44
    { min: 4.87, max: 25.74 },    // Форма 45
    { min: 0.465, max: 7.476 },   // Форма 46
    { min: 0.12, max: 0.864 },    // Форма 47
    { min: 0.689, max: 8.392 },   // Форма 48
    { min: 0, max: 10.36 },   // Форма 49
    { min: 0, max: 0.018 },   // Форма 50
    { min: 0, max: 2.36 },   // Форма 51
    { min: 0.116, max: 0.987 },   // Форма 52
    { min: 0.46, max: 3.1 },   // Форма 53
    { min: 0.358, max: 3.85 },   // Форма 54
    { min: 106.53, max: 868.71 },   // Форма 55
    { min: 0, max: 1.1 },   // Форма 56
    { min: 0.016, max: 0.172 },   // Форма 57
    { min: 0.021, max: 0.241 },   // Форма 58
    { min: 0.022, max: 0.175 },   // Форма 59
    { min: 0.053, max: 0.698 },   // Форма 60
    { min: 1.07, max: 5.645 },   // Форма 61
    { min: 0.0651, max: 0.2841 },   // Форма 62
    { min: 0.493, max: 9.66 },   // Форма 63
    { min: 0.788, max: 8.4 },   // Форма 64
  ];

  // Названия для всех 64 форм
  const formNames = [
    "Молочная кислота (лактат, E270)",           // Форма 1
    "Пировиноградная кислота (пируват) ",             // Форма 2
    "Лимонная кислота (цитрат, Е330) ",              // Форма 3
    "Цис-Аконитовая кислота (пропилентрикарбоновая) ",        // Форма 4
    "Изолимонная кислота (изоцитрат) ",          // Форма 5
    "2-Кетоглутаровая кислота (2-оксоглутаровая) ",          // Форма 6
    "Янтарная кислота (сукциновая, сукцинат, Е363) ",   // Форма 7
    "Фумаровая кислота (болетовая, E297) ",           // Форма 8
    "Яблочная кислота (малат, оксиянтарная, Е296) ",     // Форма 9
    "2-Метилглутаровая (2-метилпентандиовая) ",         // Форма 10
    "Ацетоуксусная кислота (3-кетомасляная, ацетоацетат)",          // Форма 11
    "3-Гидроксимасляная кислота",          // Форма 12
    "Малоновая кислота (пропандиовая) ",      // Форма 13
    "2-Гидрокси-3-метилбутановая кислота (2-гидроксиизовалериановая) ",      // Форма 14
    "3-Метилкротонилглицин ",     // Форма 15
    "3-Метилглутаровая кислота (3-метилпентандиоевая) ", // Форма 16
    "Изовалерилглицин (N-изопентаноилглицин) ",            // Форма 17
    "Пара-Гидроксифенилмолочная кислота ",          // Форма 18
    "Пара-Гидроксифенилпировиноградная кислота ",        // Форма 19
    "Гомогентизиновая кислота (2,5-дигидроксифенилуксусная, мелановая)",          // Форма 20
    "3-Фенилмолочная кислота (2-гидрокси-3-фенилпропионовая) ",         // Форма 21
    "Фенилглиоксиловая кислота (бензоилмуравьиная), ммоль/моль кр.",     // Форма 22
    "Миндальная кислота (фенилгликолевая), ммоль/моль кр.",    // Форма 23
    "Квинолиновая кислота (хинолиновая; 2,3-пиридиндикарбоновая)",    // Форма 24
    "Пиколиновая кислота ",       // Форма 25
    "Гликолиевая кислота (гидроксиуксусная) ",        // Форма 26
    "Глицериновая кислота (2,3-дигидроксипропановая)",        // Форма 27
    "Щавелевая кислота (этандиовая, оксаловая)",         // Форма 28
    "2-Кетоизовалериановая кислота",          // Форма 29
    "3-метил-2-оксовалерьяновая кислота (3-метил-2-оксопентановая)",      // Форма 30
    "4-Метил-2-оксовалерьяновая кислота (2-кетоизокапроевая)",         // Форма 31
    "Глутаровая кислота (пентандиовая)",        // Форма 32
    "Себациновая кислота (декандиовая)",          // Форма 33
    "Адипиновая кислота (гександиовая, Е355)",         // Форма 34
    "Субериновая кислота (пробковая, октандиовая)",         // Форма 35
    "Этилмалоновая кислота (2-карбоксимасляная)",         // Форма 36
    "Метилянтарная кислота (пиротартаровая)",         // Форма 37
    "Ксантуреновая кислота (8-гидроксикинуреновая)",        // Форма 38
    "Кинуреновая кислота",         // Форма 39
    "3-Гидроксиизовалериановая кислота (3-гидрокси-3-метилбутановая)",         // Форма 40
    "3-Гидрокси-3-метилглутаровая кислота (меглутол)",      // Форма 41
    "Формиминоглутаминовая кислота",      // Форма 42
    "Метилмалоновая кислота",       // Форма 43
    "2-Гидроксимасляная кислота (2-Гидроксибутановая)",       // Форма 44
    "Пироглутаминовая кислота (5-оксопролин)",          // Форма 45
    "N-Ацетил-L-аспартиковая кислота (N-ацетил-L-аспартат)",      // Форма 46
    "Оротовая кислота (пиримидин-4-карбоновая)",      // Форма 47
    "Гиппуровая кислота (N-бензоилглицин), ммоль/л",         // Форма 48
    "Метилгиппуровые кислоты, сум., ммоль/л",         // Форма 49
    "Фенилглиоксиловая кислота (бензоилмуравьиная), ммоль/л",        // Форма 50
    "Миндальная кислота (фенилгликолевая), ммоль/л",      // Форма 51
    "Бензойная кислота (драциловая, E210)",       // Форма 52
    "орто-Гидроксифенилуксусная кислота",        // Форма 53
    "пара-Гидроксибензойная кислота (пара-карбоксифенол)",         // Форма 54
    "Гиппуровая кислота (N-бензоилглицин), ммоль/моль кр.",      // Форма 55
    "Метилгиппуровые кислоты, сум., ммоль/моль кр.",         // Форма 56
    "орто-Метилгиппуровая кислота",         // Форма 57
    "мета-Метилгиппуровая кислота",       // Форма 58
    "пара-Метилгиппуровая кислота",       // Форма 59
    "Трикарболлиловая кислота (1,2,3-пропантрикабоксиловая)",   // Форма 60
    "3-Индолилуксусная кислота (гетероауксин)",      // Форма 61
    "Кофейная кислота (3,4-дигидроксикоричная, 3,4-дигидроксибензенакриловая)",      // Форма 62
    "Винная кислота (диоксиянтарная, тартаровая кислота, Е334)",         // Форма 63
    "2-Гидрокси-2-метилбутандиовая кислота (лимонно-яблочная)",       // Форма 64
  ];

  const handleNextPage = () => {
    setCurrentPage((prevPage) => (prevPage + 1) % totalPages);
  };

  const handlePrevPage = () => {
    setCurrentPage((prevPage) => (prevPage - 1 + totalPages) % totalPages);
  };

  const handleInputChange = (index, value) => {
    const numericValue = parseFloat(value);
    if (!isNaN(numericValue) && numericValue < 0) return; // Блокируем ввод отрицательных
    
    const newFormValues = [...formValues];
    newFormValues[index] = value;
    setFormValues(newFormValues);
  };

  const calculatePosition = (index) => {
    const value = parseFloat(formValues[index]);
    const { min, max } = minMaxValues[index];

    if (isNaN(value) || value < 0) {
      return 0; // Если значение некорректное, риска остается в центре
    }

    // Расширяем диапазон на 50% в обе стороны
    const extendedMin = min - (max - min) * 0.5;
    const extendedMax = max + (max - min) * 0.5;

    // Вычисляем позицию риски в процентах
    const position = ((value - extendedMin) / (extendedMax - extendedMin)) * 100;

    // Ограничиваем позицию в пределах 0% и 100%
    return Math.min(Math.max(position, 0), 100);
  };

  const renderForms = () => {
    const startIndex = currentPage * formsPerPage;
    const endIndex = startIndex + formsPerPage;

    return formValues
      .slice(startIndex, endIndex)
      .map((value, i) => {
        const formNumber = startIndex + i + 1;
        const formName = formNames[startIndex + i]; // Используем название из массива
        return (
          <div key={formNumber} style={{ marginBottom: '10px' }}>
            <label>
              {formName}:
              <input
                type="number"
                step="0.001" // Разрешаем дробные числа
                value={value}
                onChange={(e) => handleInputChange(startIndex + i, e.target.value)}
                placeholder={`Введите значение (≥ 0)`}
              />
            </label>
          </div>
        );
      });
  };

  const renderScales = () => {
    const startIndex = currentPage * formsPerPage;
    const endIndex = startIndex + formsPerPage;

    return formValues
      .slice(startIndex, endIndex)
      .map((_, i) => {
        const formNumber = startIndex + i + 1;
        const { min, max } = minMaxValues[startIndex + i];
        const extendedMin = min - (max - min) * 0.5;
        const extendedMax = max + (max - min) * 0.5;
        const position = calculatePosition(startIndex + i);

        return (
          <div key={formNumber} style={{ marginBottom: '20px' }}>
            <label>Шкала для {formNames[startIndex + i]}:</label>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <span>{min.toFixed(2)}</span>
              <div style={{ width: '200px', height: '10px', backgroundColor: '#ddd', margin: '0 10px', position: 'relative' }}>
                <div
                  style={{
                    position: 'absolute',
                    left: `${position}%`,
                    transform: 'translateX(-50%)', // Центрируем риску
                    height: '100%',
                    width: '2px',
                    backgroundColor: 'red',
                  }}
                ></div>
                <div
                  style={{
                    position: 'absolute',
                    left: `${((min - extendedMin) / (extendedMax - extendedMin)) * 100}%`,
                    width: `${((max - min) / (extendedMax - min)) * 100}%`,
                    height: '100%',
                    backgroundColor: 'rgba(0, 128, 0, 0.3)', // Зеленая зона
                  }}
                ></div>
              </div>
              <span>{extendedMax.toFixed(2)}</span>
            </div>
          </div>
        );
      });
  };

  return (
    <div style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>
      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
        <div style={{ flex: 1, marginRight: '20px' }}>
          {renderForms()}
          <div style={{ marginTop: '20px' }}>
            <button onClick={handlePrevPage}>Предыдущая страница</button>
            <button onClick={handleNextPage} style={{ marginLeft: '10px' }}>Следующая страница</button>
          </div>
        </div>
        <div style={{ flex: 1 }}>
          {renderScales()}
        </div>
      </div>
    </div>
  );
};

export default App;